#!/bin/bash

set -o pipefail

# This script is the entrypoint of all dotfiles
main() {
  local __usage="
Usage: [source] main [Options] [Commands]

Options:
  -h, --help    Show this help message and exit

Commands:
  set [apps]       Set apps (May need to enter password to use sudo)
                    - apt (mirror)
                    - git (link config)
                    - modern_unix (bat, exa, fd, rg)
                    - qemu
                    - rust (mirror)
                      - See apply_rust for more details
                    - sshd (disable pwd)
                    - vim (link config)
                    - zsh (omz, p10k, autosuggestions, syntax-highlighting)
  set_cmd [cmds]   Set command (Should be called via source)
                    - proxy
"

  # Load utils, ref: https://stackoverflow.com/a/12694189
  local DIR
  DOTFILES_DIR=${DOTFILES_DIR:-}
  if [ -n "$DOTFILES_DIR" ]; then
    DIR="$DOTFILES_DIR"
  else
    DIR="$(
      cd "$(dirname "$0")" || exit 1
      pwd
    )"
  fi
  # shellcheck source=/dev/null
  . "$DIR/utils"

  set_apps() {
    INFO "setting apps: $*"

    # shellcheck disable=SC2048
    for app in $*; do
      # shellcheck source=/dev/null
      . "$DIR/apps/apply_$app"
    done
  }

  set_cmds() {
    INFO "setting commands: $*"

    # shellcheck disable=SC2048
    for command in $*; do
      # shellcheck source=/dev/null
      . "$DIR/commands/$command"
    done
  }

  local ARGS=()
  local COMMAND=""
  local ROOT_USER=255
  local REPLACE_LINUX_COMMON=false
  local RESTART_SERVICE=false
  local LOG_COLOR=true
  # local MIRROR=false
  local CLEAN=false

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help | help)
      echo "$__usage"
      return 0
      ;;
    # -m | --mirror)
    #   MIRROR=true
    #   shift
    #   ;;
    -u)
      ROOT_USER=1
      shift
      ;;
    -r)
      REPLACE_LINUX_COMMON=true
      shift
      ;;
    -s)
      RESTART_SERVICE=true
      shift
      ;;
    -c)
      # shift
      if [[ "$2" == "true" ]]; then
        LOG_COLOR=true
      else
        LOG_COLOR=false
      fi
      shift
      shift
      ;;
    -C)
      CLEAN=true
      shift
      ;;
    set)
      COMMAND="$1"
      shift
      ;;
    set_cmd)
      COMMAND="$1"
      shift
      ;;
    --* | -*)
      ERROR "Unknown option: $1"
      echo "$__usage"
      return 1
      ;;
    *)
      ARGS+=("$1")
      shift
      ;;
    esac
  done

  if $LOG_COLOR; then
    INFO "Log color is enabled"
  fi

  check_os

  if [[ $ROOT_USER == 255 ]]; then
    check_root
    ROOT_USER=$?
  fi

  if $REPLACE_LINUX_COMMON; then
    INFO ".dotfiles will replace linux common utils"
  fi

  if $RESTART_SERVICE; then
    INFO "Corresponding services will be restarted"
  fi

  case $COMMAND in
  set)
    set_apps "${ARGS[*]}"
    ;;
  set_cmd)
    set_cmds "${ARGS[*]}"
    return 0
    ;;
  *)
    ERROR "Unknown command: $*"
    echo "$__usage"
    return 1
    ;;
  esac

  if $CLEAN; then
    INFO "Cleaning up"
    clean_app
  fi

  return 0
}

main "$@"
