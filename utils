#!/bin/bash

# check whether a string is contained in a list
#
# ref: https://stackoverflow.com/a/8063398
contains() {
  [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] && return 0 || return 1
}

# Check whether the user can execute as root
#
# Returns:
#   - 0 if the user is root
#       if the user can execute sudo (also means sudo exists)
#       if the user confirm he/she knows passwd of root (exec su later)
#   - 1 if the user cannot execute sudo or su
check_root() {
  INFO "Checking whether the user can execute as root"

  local groups
  groups="$(groups)"

  SHELL_CMD='bash -c'

  if contains "$groups" 'root'; then
    return 0
  elif command_exists sudo && (contains "$groups" 'sudo' || contains "$groups" 'adm'); then
    SHELL_CMD='sudo -E bash -c'
    return 0
  elif command_exists su; then
    # Ask the user to confirm he/she knows passwd of root
    echo "Can you execute su? (y/n)"

    local answer
    read -r answer

    if [ "$answer" = 'y' ]; then
      # shellcheck disable=SC2034
      SHELL_CMD='su -c'
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

# Get OS metadata
check_os() {
  if [ -f /etc/os-release ]; then
    # shellcheck source=/dev/null
    . /etc/os-release
    OS="$NAME"
    OS_VERSION="$VERSION_ID"
  else
    OS="$(uname -s)"
    OS_VERSION="$(uname -r)"
  fi

  ARCH="$(uname -m)"

  INFO "OS: $OS $OS_VERSION $ARCH"
}

# Execute as root
as_root() {
  local cmd
  cmd=("$@")

  if [ $ROOT_USER = 1 ]; then
    ERROR "Needs root. No sudo or su found"
    exit 1
  fi

  printf -v cmd_str "%q " "${cmd[@]}"
  $SHELL_CMD "$cmd_str"
}

try_nonroot_first() {
  local cmd
  cmd=("$@")
  printf -v cmd_str '%q ' "${cmd[@]}"
  bash -c "$cmd_str" || as_root "$cmd_str"
}

# Test whether a command exists
command_exists() {
  command -v "$@" >/dev/null 2>&1
}

# Install apps using package manager
install_app() {
  case $OS in
  Ubuntu | Debian)
    as_root apt-get update -qq
    as_root apt-get install -qq -y --no-install-recommends "$@"
    ;;
  *)
    ERROR "Unsupported OS"
    return 1
    ;;
  esac
}

# Clean after install
clean_app() {
  case $OS in
  Debian | Ubuntu)
    as_root apt-get autoremove --purge -y
    as_root apt-get clean
    as_root rm -rf /var/lib/apt/lists/*
    ;;
  *)
    ERROR "Unsupported OS"
    return 1
    ;;
  esac
}

# Set env to ._shrc
set_env_to_shrc() {
  local env_name
  local env_value
  env_name="$1"
  env_value="$2"

  # Get shrc of default shell
  local shrc
  shrc="$HOME/.$(basename "$SHELL")rc"

  # Append to shrc if not exists
  grep -q -F "export $env_name=$env_value" "$shrc" ||
    echo "export $env_name=$env_value" >>"$shrc"
}

# Set alias to ._shrc
set_alias_to_shrc() {
  local alias_name
  local alias_value
  alias_name="$1"
  alias_value="$2"

  # Get shrc of default shell
  local shrc
  shrc="$HOME/.$(basename "$SHELL")rc"

  # Append to shrc if not exists
  grep -q -F "alias $alias_name=\"$alias_value\"" "$shrc" ||
    echo "alias $alias_name=\"$alias_value\"" >>"$shrc"
}

# Log INFO
#
# echo string to stdout
# if $LOG_COLOR is true, echo with green color
INFO() {
  local msg
  msg="$1"
  if $LOG_COLOR; then
    echo -e "\033[32m[INFO] $msg\033[0m"
  else
    echo "[INFO] $msg"
  fi
}

# Log WARN
#
# echo string to stdout
# if $LOG_COLOR is true, echo with yellow color
WARN() {
  local msg
  msg="$1"
  if $LOG_COLOR; then
    echo -e "\033[33m[WARN] $msg\033[0m"
  else
    echo "[WARN] $msg"
  fi
}

# Log ERROR
#
# echo string to stderr
# if $LOG_COLOR is true, echo with red color
ERROR() {
  local msg
  msg="$1"
  if $LOG_COLOR; then
    echo -e "\033[31m[ERROR] $msg\033[0m" >&2
  else
    echo "[ERROR] $msg" >&2
  fi
}
